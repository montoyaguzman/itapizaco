import QtQuick 2.8
import QtQuick.Window 2.2


    Rectangle {
        id: main
        width: 400
        height: 400
        color: 'GRAY'

        property int tama : 5;
        property var matrizOrig;
        property var matrizCopia;
        property int numRepe : 0;
        property int numEvol : 0;

        Timer {
            interval: 250
            running: true
            repeat: true
            onTriggered: {

            //metodo();
            //visualizar();
            }
        }

    Component {
        id: celdaComponent
        Rectangle {
            objectName: 'celda'
            property int row: 0
            property int col: 0
            x: main.width/2+width*col
            y: main.height/2+height*row
            width: 20
            height: 20
            radius: 2.5
            smooth: true
            color: 'BLUE'
        }
    }


        property var celdas: null
   Component.onCompleted: {
       definirMatrices();
       mostrarMatrizOrig();
       //convertir(matrizOrig);
       revisarVecinos();
       mostrarEvolucion(numEvol);
       convertir(matrizCopia);
       /*celdas = [
                 [-1, 0],
                 [-1, 1],
                 [ 0,-1],
                 [ 0, 0],
                 [ 1, 4]
                 ];
            visualizar();*/
        }

   function definirMatrices(){
           matrizOrig = [tama];
           for (var a = 0; a < tama; a++){
               matrizOrig [a] = [tama];
               for (var b = 0; b < tama; b++){
                   matrizOrig[a][b] = Math.floor(Math.random()*2)
               }
           }
           matrizCopia = matrizOrig.slice();
               for (var n = 0; n < tama; n++){
           }
     }

   function mostrarMatrizOrig(){
           console.log("\nMatriz original")
           for (var g = 0; g < tama; g++){
               console.log(matrizOrig[g]);
           }
           console.log("\n");
       }

   function revisarVecinos(){
           var vecinos = 0;
           for(var f=1; f<tama-1; f++){
               for(var c=1; c<tama-1; c++){
                   vecinos = matrizCopia[f-1][c-1] + matrizCopia[f-1][c] + matrizCopia[f-1][c+1]
                           + matrizCopia[f][c-1] + matrizCopia[f][c+1]
                           + matrizCopia[f+1][c-1] + matrizCopia[f+1][c] + matrizCopia[f+1][c+1];

                   if(matrizCopia[f][c] === 1 && (vecinos>=4 || vecinos < 2)){
                       matrizCopia [f][c] = 0;
                   }
                   else if(matrizCopia[f][c] === 0 && vecinos==3){
                       matrizCopia [f][c] = 1;
                   }
               }
           }
       }

   function mostrarEvolucion(numEvol){
           var n = numEvol.toString();
           console.log("\nEvolucion "+n);

           for (var b = 0; b < tama; b++){
               console.log(matrizCopia[b]);
           }
           console.log("\n");
       }


     function convertir(matrizAConv){
         var a = (tama - 1)/2;
         var i1 = 0;
         var j1 = 0;
         for (var i = 0; i < tama; i++)
         {
            for (var j = 0; j < tama; j++)
            {
                if (matrizAConv[i][j] === 1){
                    i1 = i - a;
                    j1 = j - a;

                    //
                    var c=celdaComponent.createObject(
                                main,
                                {'row':i1,'col':j1}
                                );

                    //
                }
            }
         }

     }

        function visualizar() {

            for (var i=0;i<children.length;i++) {
                if (children[i].objectName=='celda') {
                    children[i].destroy();
                }
            }

            // Mostrar el conjunto actual de celdas
            for (var i=0;i<celdas.length;i++) {
                var c=celdaComponent.createObject(
                            main,
                            {'row':celdas[i][0],'col':celdas[i][1]}
                            );
            }
        }

        function metodo() {

            // Construir un hash de las células actualmente vivas y un recuento de vecinos (incluye auto)
            var a=new Object;
            var n=new Object;
            for (var i=0;i<celdas.length;i++) {
                var p=celdas[i]
                var r=p[0];
                var c=p[1];
                if (!(r in a))
                a[r]=new Object;
                a[r][c]=1;
                for (var dr=r-1;dr<=r+1;dr++) {
                    for (var dc=c-1;dc<=c+1;dc++) {
                        if (!(dr in n)) n[dr]=new Object;
                        if (!(dc in n[dr])) n[dr][dc]=0;
                        n[dr][dc]+=1;
                    }
                }
            }

            // Para todas las células vivas, evaluar la viabilidad
            var kill=[];
            var stay=[];
            for (var r in a) {
                for (var c in a[r]) {
                    if (n[r][c]-1<2 || n[r][c]-1>3)
                        kill.push([Number(r),Number(c)]);
                    else
                        stay.push([Number(r),Number(c)]);
                }
            }

            // Para los vecinos de células vivas, evaluar el potencial de los nacimientos
            var born=[];
            for (var r in n) {
                for (var c in n[r]) {
                    if (!((r in a) && (c in a[r]))) {
                        if (n[r][c]==3)
                            born.push([Number(r),Number(c)]);
                    }
                }
            }

            celdas=stay.concat(born)
        }

    }
